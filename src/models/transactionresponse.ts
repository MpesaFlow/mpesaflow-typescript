/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Environment,
  Environment$inboundSchema,
  Environment$outboundSchema,
} from "./environment.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  TransactionType,
  TransactionType$inboundSchema,
  TransactionType$outboundSchema,
} from "./transactiontype.js";

/**
 * The transaction status
 */
export const Status = {
  Completed: "completed",
  Failed: "failed",
  Pending: "pending",
} as const;
/**
 * The transaction status
 */
export type Status = ClosedEnum<typeof Status>;

export type TransactionResponse = {
  /**
   * The transaction id
   */
  id: string;
  /**
   * The customer id
   */
  customerId: string | null;
  object: string;
  /**
   * The environment of the business
   */
  environment?: Environment | undefined;
  /**
   * The type of transaction
   */
  type?: TransactionType | undefined;
  /**
   * The transaction amount
   */
  amount: string;
  /**
   * The transaction currency
   */
  currency: string;
  /**
   * The transaction status
   */
  status: Status;
  /**
   * The customer's phone number
   */
  phoneNumber: string;
  /**
   * The transaction metadata
   */
  metadata: { [k: string]: any | null };
  /**
   * The transaction decline reason
   */
  failureReason: string | null;
  /**
   * The transaction creation date in ISO 8601 format
   */
  createdAt: string;
  /**
   * The transaction paid date in ISO 8601 format
   */
  paidAt: string | null;
  /**
   * The transaction failed date in ISO 8601 format
   */
  failedAt: string | null;
};

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const TransactionResponse$inboundSchema: z.ZodType<
  TransactionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  customerId: z.nullable(z.string()),
  object: z.string(),
  environment: Environment$inboundSchema.default("development"),
  type: TransactionType$inboundSchema.default("payment"),
  amount: z.string(),
  currency: z.string(),
  status: Status$inboundSchema,
  phoneNumber: z.string(),
  metadata: z.record(z.nullable(z.any())),
  failureReason: z.nullable(z.string()),
  createdAt: z.string(),
  paidAt: z.nullable(z.string()),
  failedAt: z.nullable(z.string()),
});

/** @internal */
export type TransactionResponse$Outbound = {
  id: string;
  customerId: string | null;
  object: string;
  environment: string;
  type: string;
  amount: string;
  currency: string;
  status: string;
  phoneNumber: string;
  metadata: { [k: string]: any | null };
  failureReason: string | null;
  createdAt: string;
  paidAt: string | null;
  failedAt: string | null;
};

/** @internal */
export const TransactionResponse$outboundSchema: z.ZodType<
  TransactionResponse$Outbound,
  z.ZodTypeDef,
  TransactionResponse
> = z.object({
  id: z.string(),
  customerId: z.nullable(z.string()),
  object: z.string(),
  environment: Environment$outboundSchema.default("development"),
  type: TransactionType$outboundSchema.default("payment"),
  amount: z.string(),
  currency: z.string(),
  status: Status$outboundSchema,
  phoneNumber: z.string(),
  metadata: z.record(z.nullable(z.any())),
  failureReason: z.nullable(z.string()),
  createdAt: z.string(),
  paidAt: z.nullable(z.string()),
  failedAt: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionResponse$ {
  /** @deprecated use `TransactionResponse$inboundSchema` instead. */
  export const inboundSchema = TransactionResponse$inboundSchema;
  /** @deprecated use `TransactionResponse$outboundSchema` instead. */
  export const outboundSchema = TransactionResponse$outboundSchema;
  /** @deprecated use `TransactionResponse$Outbound` instead. */
  export type Outbound = TransactionResponse$Outbound;
}

export function transactionResponseToJSON(
  transactionResponse: TransactionResponse,
): string {
  return JSON.stringify(
    TransactionResponse$outboundSchema.parse(transactionResponse),
  );
}

export function transactionResponseFromJSON(
  jsonString: string,
): SafeParseResult<TransactionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionResponse' from JSON`,
  );
}
