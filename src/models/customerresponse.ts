/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Environment,
  Environment$inboundSchema,
  Environment$outboundSchema,
} from "./environment.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CustomerResponse = {
  /**
   * The customer id
   */
  id: string;
  object: string;
  /**
   * The environment of the business
   */
  environment?: Environment | undefined;
  /**
   * The name of the customer
   */
  name: string | null;
  /**
   * The customer's phone number
   */
  phoneNumber: string;
  /**
   * The date and time the customer was created in ISO 8601 format
   */
  createdAt: string;
  /**
   * The date and time the customer was last active at in ISO 8601 format
   */
  lastActiveAt: string | null;
};

/** @internal */
export const CustomerResponse$inboundSchema: z.ZodType<
  CustomerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  object: z.string(),
  environment: Environment$inboundSchema.default("development"),
  name: z.nullable(z.string()),
  phoneNumber: z.string(),
  createdAt: z.string(),
  lastActiveAt: z.nullable(z.string()),
});

/** @internal */
export type CustomerResponse$Outbound = {
  id: string;
  object: string;
  environment: string;
  name: string | null;
  phoneNumber: string;
  createdAt: string;
  lastActiveAt: string | null;
};

/** @internal */
export const CustomerResponse$outboundSchema: z.ZodType<
  CustomerResponse$Outbound,
  z.ZodTypeDef,
  CustomerResponse
> = z.object({
  id: z.string(),
  object: z.string(),
  environment: Environment$outboundSchema.default("development"),
  name: z.nullable(z.string()),
  phoneNumber: z.string(),
  createdAt: z.string(),
  lastActiveAt: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerResponse$ {
  /** @deprecated use `CustomerResponse$inboundSchema` instead. */
  export const inboundSchema = CustomerResponse$inboundSchema;
  /** @deprecated use `CustomerResponse$outboundSchema` instead. */
  export const outboundSchema = CustomerResponse$outboundSchema;
  /** @deprecated use `CustomerResponse$Outbound` instead. */
  export type Outbound = CustomerResponse$Outbound;
}

export function customerResponseToJSON(
  customerResponse: CustomerResponse,
): string {
  return JSON.stringify(
    CustomerResponse$outboundSchema.parse(customerResponse),
  );
}

export function customerResponseFromJSON(
  jsonString: string,
): SafeParseResult<CustomerResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerResponse' from JSON`,
  );
}
