/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type InvalidApiKeyErrorError = {
  /**
   * HTTP status code of the error
   */
  status: number;
  /**
   * Machine-readable error name
   */
  code: string;
  /**
   * Human-readable error message
   */
  message: string;
};

/** @internal */
export const InvalidApiKeyErrorError$inboundSchema: z.ZodType<
  InvalidApiKeyErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.number(),
  code: z.string(),
  message: z.string(),
});

/** @internal */
export type InvalidApiKeyErrorError$Outbound = {
  status: number;
  code: string;
  message: string;
};

/** @internal */
export const InvalidApiKeyErrorError$outboundSchema: z.ZodType<
  InvalidApiKeyErrorError$Outbound,
  z.ZodTypeDef,
  InvalidApiKeyErrorError
> = z.object({
  status: z.number(),
  code: z.string(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidApiKeyErrorError$ {
  /** @deprecated use `InvalidApiKeyErrorError$inboundSchema` instead. */
  export const inboundSchema = InvalidApiKeyErrorError$inboundSchema;
  /** @deprecated use `InvalidApiKeyErrorError$outboundSchema` instead. */
  export const outboundSchema = InvalidApiKeyErrorError$outboundSchema;
  /** @deprecated use `InvalidApiKeyErrorError$Outbound` instead. */
  export type Outbound = InvalidApiKeyErrorError$Outbound;
}

export function invalidApiKeyErrorErrorToJSON(
  invalidApiKeyErrorError: InvalidApiKeyErrorError,
): string {
  return JSON.stringify(
    InvalidApiKeyErrorError$outboundSchema.parse(invalidApiKeyErrorError),
  );
}

export function invalidApiKeyErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<InvalidApiKeyErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvalidApiKeyErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvalidApiKeyErrorError' from JSON`,
  );
}
