/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export const ListCustomersSortEnum2 = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type ListCustomersSortEnum2 = ClosedEnum<typeof ListCustomersSortEnum2>;

export const ListCustomersSortEnum1 = {
  Id: "id",
  Name: "name",
  PhoneNumber: "phoneNumber",
  CreatedAt: "createdAt",
  LastActiveAt: "lastActiveAt",
} as const;
export type ListCustomersSortEnum1 = ClosedEnum<typeof ListCustomersSortEnum1>;

export type ListCustomersSortUnion =
  | ListCustomersSortEnum1
  | ListCustomersSortEnum2;

export type ListCustomersRequest = {
  q?: string | undefined;
  cursor?: string | undefined;
  limit?: number | undefined;
  start?: string | null | undefined;
  end?: string | null | undefined;
  sort?: Array<ListCustomersSortEnum1 | ListCustomersSortEnum2> | undefined;
};

/**
 * List of all customers
 */
export type ListCustomersResponseBody = {
  data: Array<models.CustomerResponse>;
  /**
   * Cursor for pagination, representing the last item from the previous page
   */
  nextCursor: string | null;
  /**
   * The number of data to return (1-100)
   */
  limit?: number | undefined;
};

export type ListCustomersResponse = {
  result: ListCustomersResponseBody;
};

/** @internal */
export const ListCustomersSortEnum2$inboundSchema: z.ZodNativeEnum<
  typeof ListCustomersSortEnum2
> = z.nativeEnum(ListCustomersSortEnum2);

/** @internal */
export const ListCustomersSortEnum2$outboundSchema: z.ZodNativeEnum<
  typeof ListCustomersSortEnum2
> = ListCustomersSortEnum2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCustomersSortEnum2$ {
  /** @deprecated use `ListCustomersSortEnum2$inboundSchema` instead. */
  export const inboundSchema = ListCustomersSortEnum2$inboundSchema;
  /** @deprecated use `ListCustomersSortEnum2$outboundSchema` instead. */
  export const outboundSchema = ListCustomersSortEnum2$outboundSchema;
}

/** @internal */
export const ListCustomersSortEnum1$inboundSchema: z.ZodNativeEnum<
  typeof ListCustomersSortEnum1
> = z.nativeEnum(ListCustomersSortEnum1);

/** @internal */
export const ListCustomersSortEnum1$outboundSchema: z.ZodNativeEnum<
  typeof ListCustomersSortEnum1
> = ListCustomersSortEnum1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCustomersSortEnum1$ {
  /** @deprecated use `ListCustomersSortEnum1$inboundSchema` instead. */
  export const inboundSchema = ListCustomersSortEnum1$inboundSchema;
  /** @deprecated use `ListCustomersSortEnum1$outboundSchema` instead. */
  export const outboundSchema = ListCustomersSortEnum1$outboundSchema;
}

/** @internal */
export const ListCustomersSortUnion$inboundSchema: z.ZodType<
  ListCustomersSortUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  ListCustomersSortEnum1$inboundSchema,
  ListCustomersSortEnum2$inboundSchema,
]);

/** @internal */
export type ListCustomersSortUnion$Outbound = string | string;

/** @internal */
export const ListCustomersSortUnion$outboundSchema: z.ZodType<
  ListCustomersSortUnion$Outbound,
  z.ZodTypeDef,
  ListCustomersSortUnion
> = z.union([
  ListCustomersSortEnum1$outboundSchema,
  ListCustomersSortEnum2$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCustomersSortUnion$ {
  /** @deprecated use `ListCustomersSortUnion$inboundSchema` instead. */
  export const inboundSchema = ListCustomersSortUnion$inboundSchema;
  /** @deprecated use `ListCustomersSortUnion$outboundSchema` instead. */
  export const outboundSchema = ListCustomersSortUnion$outboundSchema;
  /** @deprecated use `ListCustomersSortUnion$Outbound` instead. */
  export type Outbound = ListCustomersSortUnion$Outbound;
}

export function listCustomersSortUnionToJSON(
  listCustomersSortUnion: ListCustomersSortUnion,
): string {
  return JSON.stringify(
    ListCustomersSortUnion$outboundSchema.parse(listCustomersSortUnion),
  );
}

export function listCustomersSortUnionFromJSON(
  jsonString: string,
): SafeParseResult<ListCustomersSortUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCustomersSortUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCustomersSortUnion' from JSON`,
  );
}

/** @internal */
export const ListCustomersRequest$inboundSchema: z.ZodType<
  ListCustomersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  q: z.string().optional(),
  cursor: z.string().optional(),
  limit: z.number().default(10),
  start: z.nullable(z.string()).optional(),
  end: z.nullable(z.string()).optional(),
  sort: z.array(
    z.union([
      ListCustomersSortEnum1$inboundSchema,
      ListCustomersSortEnum2$inboundSchema,
    ]),
  ).optional(),
});

/** @internal */
export type ListCustomersRequest$Outbound = {
  q?: string | undefined;
  cursor?: string | undefined;
  limit: number;
  start?: string | null | undefined;
  end?: string | null | undefined;
  sort?: Array<string | string> | undefined;
};

/** @internal */
export const ListCustomersRequest$outboundSchema: z.ZodType<
  ListCustomersRequest$Outbound,
  z.ZodTypeDef,
  ListCustomersRequest
> = z.object({
  q: z.string().optional(),
  cursor: z.string().optional(),
  limit: z.number().default(10),
  start: z.nullable(z.string()).optional(),
  end: z.nullable(z.string()).optional(),
  sort: z.array(
    z.union([
      ListCustomersSortEnum1$outboundSchema,
      ListCustomersSortEnum2$outboundSchema,
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCustomersRequest$ {
  /** @deprecated use `ListCustomersRequest$inboundSchema` instead. */
  export const inboundSchema = ListCustomersRequest$inboundSchema;
  /** @deprecated use `ListCustomersRequest$outboundSchema` instead. */
  export const outboundSchema = ListCustomersRequest$outboundSchema;
  /** @deprecated use `ListCustomersRequest$Outbound` instead. */
  export type Outbound = ListCustomersRequest$Outbound;
}

export function listCustomersRequestToJSON(
  listCustomersRequest: ListCustomersRequest,
): string {
  return JSON.stringify(
    ListCustomersRequest$outboundSchema.parse(listCustomersRequest),
  );
}

export function listCustomersRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListCustomersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCustomersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCustomersRequest' from JSON`,
  );
}

/** @internal */
export const ListCustomersResponseBody$inboundSchema: z.ZodType<
  ListCustomersResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(models.CustomerResponse$inboundSchema),
  next_cursor: z.nullable(z.string()),
  limit: z.number().default(10),
}).transform((v) => {
  return remap$(v, {
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type ListCustomersResponseBody$Outbound = {
  data: Array<models.CustomerResponse$Outbound>;
  next_cursor: string | null;
  limit: number;
};

/** @internal */
export const ListCustomersResponseBody$outboundSchema: z.ZodType<
  ListCustomersResponseBody$Outbound,
  z.ZodTypeDef,
  ListCustomersResponseBody
> = z.object({
  data: z.array(models.CustomerResponse$outboundSchema),
  nextCursor: z.nullable(z.string()),
  limit: z.number().default(10),
}).transform((v) => {
  return remap$(v, {
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCustomersResponseBody$ {
  /** @deprecated use `ListCustomersResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListCustomersResponseBody$inboundSchema;
  /** @deprecated use `ListCustomersResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListCustomersResponseBody$outboundSchema;
  /** @deprecated use `ListCustomersResponseBody$Outbound` instead. */
  export type Outbound = ListCustomersResponseBody$Outbound;
}

export function listCustomersResponseBodyToJSON(
  listCustomersResponseBody: ListCustomersResponseBody,
): string {
  return JSON.stringify(
    ListCustomersResponseBody$outboundSchema.parse(listCustomersResponseBody),
  );
}

export function listCustomersResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListCustomersResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCustomersResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCustomersResponseBody' from JSON`,
  );
}

/** @internal */
export const ListCustomersResponse$inboundSchema: z.ZodType<
  ListCustomersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => ListCustomersResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListCustomersResponse$Outbound = {
  Result: ListCustomersResponseBody$Outbound;
};

/** @internal */
export const ListCustomersResponse$outboundSchema: z.ZodType<
  ListCustomersResponse$Outbound,
  z.ZodTypeDef,
  ListCustomersResponse
> = z.object({
  result: z.lazy(() => ListCustomersResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCustomersResponse$ {
  /** @deprecated use `ListCustomersResponse$inboundSchema` instead. */
  export const inboundSchema = ListCustomersResponse$inboundSchema;
  /** @deprecated use `ListCustomersResponse$outboundSchema` instead. */
  export const outboundSchema = ListCustomersResponse$outboundSchema;
  /** @deprecated use `ListCustomersResponse$Outbound` instead. */
  export type Outbound = ListCustomersResponse$Outbound;
}

export function listCustomersResponseToJSON(
  listCustomersResponse: ListCustomersResponse,
): string {
  return JSON.stringify(
    ListCustomersResponse$outboundSchema.parse(listCustomersResponse),
  );
}

export function listCustomersResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListCustomersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCustomersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCustomersResponse' from JSON`,
  );
}
