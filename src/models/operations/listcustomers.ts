/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export const SortOrder = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type SortOrder = ClosedEnum<typeof SortOrder>;

export const SortField = {
  Id: "id",
  Name: "name",
  PhoneNumber: "phoneNumber",
  CreatedAt: "createdAt",
  LastActiveAt: "lastActiveAt",
} as const;
export type SortField = ClosedEnum<typeof SortField>;

export type ListCustomersRequest = {
  /**
   * Search for a customer by name or phone number
   */
  q?: string | null | undefined;
  /**
   * Cursor for pagination, representing the last item from the previous page
   */
  cursor?: string | null | undefined;
  /**
   * The number of customers to return (1-100)
   */
  limit?: number | undefined;
  /**
   * Start date (inclusive) for filtering customers in ISO 8601 format
   */
  start?: string | null | undefined;
  /**
   * End date (inclusive) for filtering customers in ISO 8601 format
   */
  end?: string | null | undefined;
  sortOrder?: SortOrder | undefined;
  sortField?: SortField | undefined;
};

export type ListCustomersResponse = {
  result: models.PaginatedData;
};

/** @internal */
export const SortOrder$inboundSchema: z.ZodNativeEnum<typeof SortOrder> = z
  .nativeEnum(SortOrder);

/** @internal */
export const SortOrder$outboundSchema: z.ZodNativeEnum<typeof SortOrder> =
  SortOrder$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SortOrder$ {
  /** @deprecated use `SortOrder$inboundSchema` instead. */
  export const inboundSchema = SortOrder$inboundSchema;
  /** @deprecated use `SortOrder$outboundSchema` instead. */
  export const outboundSchema = SortOrder$outboundSchema;
}

/** @internal */
export const SortField$inboundSchema: z.ZodNativeEnum<typeof SortField> = z
  .nativeEnum(SortField);

/** @internal */
export const SortField$outboundSchema: z.ZodNativeEnum<typeof SortField> =
  SortField$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SortField$ {
  /** @deprecated use `SortField$inboundSchema` instead. */
  export const inboundSchema = SortField$inboundSchema;
  /** @deprecated use `SortField$outboundSchema` instead. */
  export const outboundSchema = SortField$outboundSchema;
}

/** @internal */
export const ListCustomersRequest$inboundSchema: z.ZodType<
  ListCustomersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  q: z.nullable(z.string()).optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().default(10),
  start: z.nullable(z.string()).optional(),
  end: z.nullable(z.string()).optional(),
  sortOrder: SortOrder$inboundSchema.default("desc"),
  sortField: SortField$inboundSchema.default("createdAt"),
});

/** @internal */
export type ListCustomersRequest$Outbound = {
  q?: string | null | undefined;
  cursor?: string | null | undefined;
  limit: number;
  start?: string | null | undefined;
  end?: string | null | undefined;
  sortOrder: string;
  sortField: string;
};

/** @internal */
export const ListCustomersRequest$outboundSchema: z.ZodType<
  ListCustomersRequest$Outbound,
  z.ZodTypeDef,
  ListCustomersRequest
> = z.object({
  q: z.nullable(z.string()).optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().default(10),
  start: z.nullable(z.string()).optional(),
  end: z.nullable(z.string()).optional(),
  sortOrder: SortOrder$outboundSchema.default("desc"),
  sortField: SortField$outboundSchema.default("createdAt"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCustomersRequest$ {
  /** @deprecated use `ListCustomersRequest$inboundSchema` instead. */
  export const inboundSchema = ListCustomersRequest$inboundSchema;
  /** @deprecated use `ListCustomersRequest$outboundSchema` instead. */
  export const outboundSchema = ListCustomersRequest$outboundSchema;
  /** @deprecated use `ListCustomersRequest$Outbound` instead. */
  export type Outbound = ListCustomersRequest$Outbound;
}

export function listCustomersRequestToJSON(
  listCustomersRequest: ListCustomersRequest,
): string {
  return JSON.stringify(
    ListCustomersRequest$outboundSchema.parse(listCustomersRequest),
  );
}

export function listCustomersRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListCustomersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCustomersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCustomersRequest' from JSON`,
  );
}

/** @internal */
export const ListCustomersResponse$inboundSchema: z.ZodType<
  ListCustomersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: models.PaginatedData$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListCustomersResponse$Outbound = {
  Result: models.PaginatedData$Outbound;
};

/** @internal */
export const ListCustomersResponse$outboundSchema: z.ZodType<
  ListCustomersResponse$Outbound,
  z.ZodTypeDef,
  ListCustomersResponse
> = z.object({
  result: models.PaginatedData$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCustomersResponse$ {
  /** @deprecated use `ListCustomersResponse$inboundSchema` instead. */
  export const inboundSchema = ListCustomersResponse$inboundSchema;
  /** @deprecated use `ListCustomersResponse$outboundSchema` instead. */
  export const outboundSchema = ListCustomersResponse$outboundSchema;
  /** @deprecated use `ListCustomersResponse$Outbound` instead. */
  export type Outbound = ListCustomersResponse$Outbound;
}

export function listCustomersResponseToJSON(
  listCustomersResponse: ListCustomersResponse,
): string {
  return JSON.stringify(
    ListCustomersResponse$outboundSchema.parse(listCustomersResponse),
  );
}

export function listCustomersResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListCustomersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCustomersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCustomersResponse' from JSON`,
  );
}
