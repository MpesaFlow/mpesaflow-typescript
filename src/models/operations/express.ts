/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * The payment body details
 */
export type ExpressRequest = {
  /**
   * The customer's phone number
   */
  phoneNumber: string;
  /**
   * The amount being paid. Must be a number (e.g., 100 or 100.50)
   */
  amount: string;
  /**
   * The description of the transaction
   */
  transactionDesc: string;
  /**
   * The type of transaction
   */
  type?: models.TransactionType | undefined;
  /**
   * The name of the customer
   */
  customerName?: string | undefined;
  /**
   * The account refernce of the business. it can be the name of the business
   */
  accountReference?: string | undefined;
  metadata?: { [k: string]: any | null } | undefined;
};

/**
 * The status of the transaction
 */
export const ExpressStatus = {
  Completed: "completed",
  Failed: "failed",
} as const;
/**
 * The status of the transaction
 */
export type ExpressStatus = ClosedEnum<typeof ExpressStatus>;

/**
 * Payment Response
 */
export type ExpressResponse = {
  /**
   * The status of the transaction
   */
  status: ExpressStatus;
  /**
   * The response message of the payment
   */
  message: string;
  /**
   * The amount being paid. Must be a number (e.g., 100 or 100.50)
   */
  amount: string;
  /**
   * The customer's phone number
   */
  phoneNumber: string;
  /**
   * The transaction id
   */
  transactionId: string;
  /**
   * The type of transaction
   */
  type?: models.TransactionType | undefined;
  /**
   * The date and time at with the payment was paidAt or failedAt in ISO 8601 format
   */
  timestamp: string;
};

/** @internal */
export const ExpressRequest$inboundSchema: z.ZodType<
  ExpressRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  phoneNumber: z.string(),
  amount: z.string(),
  transactionDesc: z.string(),
  type: models.TransactionType$inboundSchema.default("payment"),
  customerName: z.string().optional(),
  accountReference: z.string().optional(),
  metadata: z.record(z.nullable(z.any())).optional(),
});

/** @internal */
export type ExpressRequest$Outbound = {
  phoneNumber: string;
  amount: string;
  transactionDesc: string;
  type: string;
  customerName?: string | undefined;
  accountReference?: string | undefined;
  metadata?: { [k: string]: any | null } | undefined;
};

/** @internal */
export const ExpressRequest$outboundSchema: z.ZodType<
  ExpressRequest$Outbound,
  z.ZodTypeDef,
  ExpressRequest
> = z.object({
  phoneNumber: z.string(),
  amount: z.string(),
  transactionDesc: z.string(),
  type: models.TransactionType$outboundSchema.default("payment"),
  customerName: z.string().optional(),
  accountReference: z.string().optional(),
  metadata: z.record(z.nullable(z.any())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExpressRequest$ {
  /** @deprecated use `ExpressRequest$inboundSchema` instead. */
  export const inboundSchema = ExpressRequest$inboundSchema;
  /** @deprecated use `ExpressRequest$outboundSchema` instead. */
  export const outboundSchema = ExpressRequest$outboundSchema;
  /** @deprecated use `ExpressRequest$Outbound` instead. */
  export type Outbound = ExpressRequest$Outbound;
}

export function expressRequestToJSON(expressRequest: ExpressRequest): string {
  return JSON.stringify(ExpressRequest$outboundSchema.parse(expressRequest));
}

export function expressRequestFromJSON(
  jsonString: string,
): SafeParseResult<ExpressRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExpressRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExpressRequest' from JSON`,
  );
}

/** @internal */
export const ExpressStatus$inboundSchema: z.ZodNativeEnum<
  typeof ExpressStatus
> = z.nativeEnum(ExpressStatus);

/** @internal */
export const ExpressStatus$outboundSchema: z.ZodNativeEnum<
  typeof ExpressStatus
> = ExpressStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExpressStatus$ {
  /** @deprecated use `ExpressStatus$inboundSchema` instead. */
  export const inboundSchema = ExpressStatus$inboundSchema;
  /** @deprecated use `ExpressStatus$outboundSchema` instead. */
  export const outboundSchema = ExpressStatus$outboundSchema;
}

/** @internal */
export const ExpressResponse$inboundSchema: z.ZodType<
  ExpressResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: ExpressStatus$inboundSchema,
  message: z.string(),
  amount: z.string(),
  phoneNumber: z.string(),
  transactionId: z.string(),
  type: models.TransactionType$inboundSchema.default("payment"),
  timestamp: z.string(),
});

/** @internal */
export type ExpressResponse$Outbound = {
  status: string;
  message: string;
  amount: string;
  phoneNumber: string;
  transactionId: string;
  type: string;
  timestamp: string;
};

/** @internal */
export const ExpressResponse$outboundSchema: z.ZodType<
  ExpressResponse$Outbound,
  z.ZodTypeDef,
  ExpressResponse
> = z.object({
  status: ExpressStatus$outboundSchema,
  message: z.string(),
  amount: z.string(),
  phoneNumber: z.string(),
  transactionId: z.string(),
  type: models.TransactionType$outboundSchema.default("payment"),
  timestamp: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExpressResponse$ {
  /** @deprecated use `ExpressResponse$inboundSchema` instead. */
  export const inboundSchema = ExpressResponse$inboundSchema;
  /** @deprecated use `ExpressResponse$outboundSchema` instead. */
  export const outboundSchema = ExpressResponse$outboundSchema;
  /** @deprecated use `ExpressResponse$Outbound` instead. */
  export type Outbound = ExpressResponse$Outbound;
}

export function expressResponseToJSON(
  expressResponse: ExpressResponse,
): string {
  return JSON.stringify(ExpressResponse$outboundSchema.parse(expressResponse));
}

export function expressResponseFromJSON(
  jsonString: string,
): SafeParseResult<ExpressResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExpressResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExpressResponse' from JSON`,
  );
}
