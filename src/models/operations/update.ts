/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Update a customer
 */
export type UpdateRequestBody = {
  /**
   * The name of the customer
   */
  name?: string | null | undefined;
  /**
   * The customer's phone number
   */
  phoneNumber?: string | undefined;
};

export type UpdateRequest = {
  /**
   * The customer id
   */
  id: string;
  /**
   * Update a customer
   */
  requestBody: UpdateRequestBody;
};

/** @internal */
export const UpdateRequestBody$inboundSchema: z.ZodType<
  UpdateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  phoneNumber: z.string().optional(),
});

/** @internal */
export type UpdateRequestBody$Outbound = {
  name?: string | null | undefined;
  phoneNumber?: string | undefined;
};

/** @internal */
export const UpdateRequestBody$outboundSchema: z.ZodType<
  UpdateRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateRequestBody
> = z.object({
  name: z.nullable(z.string()).optional(),
  phoneNumber: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRequestBody$ {
  /** @deprecated use `UpdateRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateRequestBody$inboundSchema;
  /** @deprecated use `UpdateRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateRequestBody$outboundSchema;
  /** @deprecated use `UpdateRequestBody$Outbound` instead. */
  export type Outbound = UpdateRequestBody$Outbound;
}

export function updateRequestBodyToJSON(
  updateRequestBody: UpdateRequestBody,
): string {
  return JSON.stringify(
    UpdateRequestBody$outboundSchema.parse(updateRequestBody),
  );
}

export function updateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateRequest$inboundSchema: z.ZodType<
  UpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => UpdateRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateRequest$Outbound = {
  id: string;
  RequestBody: UpdateRequestBody$Outbound;
};

/** @internal */
export const UpdateRequest$outboundSchema: z.ZodType<
  UpdateRequest$Outbound,
  z.ZodTypeDef,
  UpdateRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => UpdateRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRequest$ {
  /** @deprecated use `UpdateRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateRequest$inboundSchema;
  /** @deprecated use `UpdateRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateRequest$outboundSchema;
  /** @deprecated use `UpdateRequest$Outbound` instead. */
  export type Outbound = UpdateRequest$Outbound;
}

export function updateRequestToJSON(updateRequest: UpdateRequest): string {
  return JSON.stringify(UpdateRequest$outboundSchema.parse(updateRequest));
}

export function updateRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateRequest' from JSON`,
  );
}
