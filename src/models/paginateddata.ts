/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CustomerResponse,
  CustomerResponse$inboundSchema,
  CustomerResponse$Outbound,
  CustomerResponse$outboundSchema,
} from "./customerresponse.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Meta = {
  /**
   * Cursor for pagination, representing the last item from the previous page
   */
  cursor: string | null;
  hasPreviousPage: boolean;
  hasNextPage: boolean;
};

export type PaginatedData = {
  data: Array<CustomerResponse>;
  meta: Meta;
};

/** @internal */
export const Meta$inboundSchema: z.ZodType<Meta, z.ZodTypeDef, unknown> = z
  .object({
    cursor: z.nullable(z.string()),
    hasPreviousPage: z.boolean(),
    hasNextPage: z.boolean(),
  });

/** @internal */
export type Meta$Outbound = {
  cursor: string | null;
  hasPreviousPage: boolean;
  hasNextPage: boolean;
};

/** @internal */
export const Meta$outboundSchema: z.ZodType<Meta$Outbound, z.ZodTypeDef, Meta> =
  z.object({
    cursor: z.nullable(z.string()),
    hasPreviousPage: z.boolean(),
    hasNextPage: z.boolean(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Meta$ {
  /** @deprecated use `Meta$inboundSchema` instead. */
  export const inboundSchema = Meta$inboundSchema;
  /** @deprecated use `Meta$outboundSchema` instead. */
  export const outboundSchema = Meta$outboundSchema;
  /** @deprecated use `Meta$Outbound` instead. */
  export type Outbound = Meta$Outbound;
}

export function metaToJSON(meta: Meta): string {
  return JSON.stringify(Meta$outboundSchema.parse(meta));
}

export function metaFromJSON(
  jsonString: string,
): SafeParseResult<Meta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Meta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Meta' from JSON`,
  );
}

/** @internal */
export const PaginatedData$inboundSchema: z.ZodType<
  PaginatedData,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(CustomerResponse$inboundSchema),
  meta: z.lazy(() => Meta$inboundSchema),
});

/** @internal */
export type PaginatedData$Outbound = {
  data: Array<CustomerResponse$Outbound>;
  meta: Meta$Outbound;
};

/** @internal */
export const PaginatedData$outboundSchema: z.ZodType<
  PaginatedData$Outbound,
  z.ZodTypeDef,
  PaginatedData
> = z.object({
  data: z.array(CustomerResponse$outboundSchema),
  meta: z.lazy(() => Meta$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginatedData$ {
  /** @deprecated use `PaginatedData$inboundSchema` instead. */
  export const inboundSchema = PaginatedData$inboundSchema;
  /** @deprecated use `PaginatedData$outboundSchema` instead. */
  export const outboundSchema = PaginatedData$outboundSchema;
  /** @deprecated use `PaginatedData$Outbound` instead. */
  export type Outbound = PaginatedData$Outbound;
}

export function paginatedDataToJSON(paginatedData: PaginatedData): string {
  return JSON.stringify(PaginatedData$outboundSchema.parse(paginatedData));
}

export function paginatedDataFromJSON(
  jsonString: string,
): SafeParseResult<PaginatedData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaginatedData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginatedData' from JSON`,
  );
}
